#include "VoxIO.h"
#include "Array3D.h"
#include "Vec2.h"
#include "BBox.h"

#include <fstream>
#include <sstream>
#include <iostream>

std::vector<Vec2f> LoadVec2Arr(const std::string& filename) {
  std::ifstream in(filename);
  std::string line;
  std::vector<Vec2f> vec;
  while (std::getline(in, line)) {
    if (line.size() < 3) {
      continue;
    }
    std::istringstream iss(line);
    Vec2f v;
    iss >> v[0] >> v[1];
    vec.push_back(v);
  }
  return vec;
}

float Linterp(const std::vector<Vec2f>& arr, float x) {
  if (arr.size() == 0) {
    return 0;
  }
  if (x <= 0) {
    return 0;
  }
  if (x <= arr[0][0]) {
    return x / arr[0][0] * arr[0][1];
  }
  auto it =
      std::lower_bound(arr.begin(), arr.end(), x,
                       [](const Vec2f& a, float val) { return a[0] < val; });
  if (it == arr.end()) {
    return arr.back()[1];
  }
  size_t i = std::distance(arr.begin(), it);
  float alpha = (arr[i][0] - x) / (arr[i][0] - arr[i - 1][0]);
  float val = alpha * arr[i - 1][1] + (1 - alpha) * arr[i][1];
  return val;
}

float RhoToEps(float rho) {
  const float EpsSolid = 2.35;
  float eps = (2.7*rho+4.35) / (4.35-1.35*rho);
  return eps;
}

float RhoToEpsBruggeman(float rho, float eps0) {
  float Hb = 2 - 3 * rho + (3 * rho - 1) * eps0;
  float eeff = 0.25f * (Hb + std::sqrt(Hb*Hb+8*eps0));
  return eeff;
}


struct LookupTable {
  std::vector<float> y;
  float x0 = 0;
  float dx = 0.01;
  float Lookup(float x) {
    int i0 = int((x - x0) / dx);
    if (i0 <= 0) {
      return y[0];
    }
    if (i0 >= y.size() - 1) {
      return y[y.size() - 1];
    }
    float alpha1 = (x - (x0 + dx * i0))/dx;
    float alpha = 1 - alpha1;
    float interp = alpha * y[i0] + alpha1*y[i0+1];
    return interp;
  }
};

LookupTable InverseIncreasingMap(const std::vector<Vec2f>& a, float dx) {
  LookupTable lut;
  lut.dx = dx;
  lut.x0 = a[0][1];
  float xmax = a.back()[1];
  size_t numx = (xmax - lut.x0) / dx;
  lut.y.resize(numx);

  std::vector<Vec2f> invCopy(a.size());
  for (size_t i = 0; i < a.size(); i++) {
    invCopy[i][0] = a[i][1];
    invCopy[i][1] = a[i][0];
  }

  for (size_t i = 0; i < numx; i++) {
    float x = lut.x0 + i * lut.dx;
    float y = Linterp(invCopy, x);
    lut.y[i] = y;
  }
  return lut;
}

struct PointSample {
  Vec3f pos;
  float val = 0;  
};

const float Gyroid2mm[] = {
    0,       0.01247, 0.01569, 0.01715, 0.0186,  0.02003, 0.02079, 0.02156,
    0.02233, 0.0231,  0.02386, 0.02463, 0.02521, 0.02561, 0.02602, 0.02643,
    0.02683, 0.02724, 0.02764, 0.02805, 0.02845, 0.02886, 0.02926, 0.02967,
    0.03006, 0.0304,  0.03074, 0.03107, 0.03141, 0.03175, 0.03208, 0.03242,
    0.03276, 0.0331,  0.03343, 0.03377, 0.03411, 0.03444, 0.03478, 0.03519,
    0.03574, 0.03628, 0.03683, 0.03737, 0.03791, 0.03846, 0.039,   0.03955,
    0.0401,  0.0407,  0.0413,  0.04191, 0.04251, 0.04311, 0.04371, 0.04431,
    0.04491, 0.04553, 0.04615, 0.04677, 0.0474,  0.04802, 0.04864, 0.04927,
    0.04989, 0.05056, 0.05124, 0.05192, 0.0526,  0.05328, 0.05396, 0.05464,
    0.05534, 0.05608, 0.05681, 0.05755, 0.05828, 0.05902, 0.05976, 0.0605,
    0.06125, 0.062,   0.06275, 0.0635,  0.06425, 0.065,   0.06573, 0.06647,
    0.06721, 0.06794, 0.06868, 0.06942, 0.07015, 0.07086, 0.07157, 0.07228,
    0.07298, 0.07369, 0.0744,  0.07512, 0.0759,  0.07668, 0.07746, 0.07824,
    0.07902, 0.0798,  0.08056, 0.08133, 0.0821,  0.08286, 0.08363, 0.08439,
    0.08516, 0.08591, 0.08667, 0.08743, 0.08819, 0.08895, 0.08971, 0.09045,
    0.09118, 0.09191, 0.09264, 0.09337, 0.0941,  0.09483, 0.09562, 0.09642,
    0.09722, 0.09802, 0.09883, 0.09963, 0.1004,  0.1011,  0.1019,  0.1026,
    0.1034,  0.1041,  0.1048,  0.1056,  0.1064,  0.1071,  0.1079,  0.1086,
    0.1094,  0.1102,  0.1109,  0.1116,  0.1124,  0.1131,  0.1138,  0.1146,
    0.1153,  0.1161,  0.1169,  0.1177,  0.1185,  0.1193,  0.1201,  0.1208,
    0.1216,  0.1224,  0.1231,  0.1239,  0.1247,  0.1254,  0.1261,  0.1269,
    0.1276,  0.1283,  0.129,   0.1297,  0.1305,  0.1312,  0.132,   0.1327,
    0.1335,  0.1342,  0.135,   0.1358,  0.1366,  0.1374,  0.1382,  0.139,
    0.1397,  0.1405,  0.1413,  0.142,   0.1428,  0.1435,  0.1443,  0.145,
    0.1458,  0.1465,  0.1473,  0.1481,  0.1488,  0.1496,  0.1503,  0.1511,
    0.1518,  0.1526,  0.1533,  0.1541,  0.1548,  0.1556,  0.1564,  0.1571,
    0.1579,  0.1587,  0.1594,  0.1602,  0.1609,  0.1616,  0.1623,  0.163,
    0.1637,  0.1644,  0.1651,  0.1659,  0.1668,  0.1676,  0.1684,  0.1692,
    0.17,    0.1708,  0.1715,  0.1722,  0.1729,  0.1737,  0.1744,  0.1751,
    0.1759,  0.1767,  0.1774,  0.1782,  0.179,   0.1797,  0.1805,  0.1813,
    0.1821,  0.1829,  0.1836,  0.1844,  0.1852,  0.1859,  0.1866,  0.1873,
    0.188,   0.1887,  0.1894,  0.1902,  0.1909,  0.1917,  0.1924,  0.1932,
    0.1939,  0.1947,  0.1955,  0.1963,  0.1971,  0.1979,  0.1987,  0.1995,
    0.2003,  0.201,   0.2018,  0.2026,  0.2033,  0.2041,  0.2049,  0.2056,
    0.2063,  0.207,   0.2078,  0.2085,  0.2092,  0.2099,  0.2106,  0.2114,
    0.2121,  0.2129,  0.2136,  0.2143,  0.2151,  0.2159,  0.2167,  0.2174,
    0.2182,  0.219,   0.2198,  0.2205,  0.2212,  0.2219,  0.2226,  0.2233,
    0.224,   0.2247,  0.2254,  0.2262,  0.227,   0.2278,  0.2286,  0.2294,
    0.2301,  0.2309,  0.2317,  0.2325,  0.2332,  0.234,   0.2348,  0.2355,
    0.2363,  0.237,   0.2377,  0.2385,  0.2392,  0.2399,  0.2407,  0.2415,
    0.2422,  0.243,   0.2437,  0.2445,  0.2452,  0.2459,  0.2467,  0.2474,
    0.2481,  0.2488,  0.2496,  0.2503,  0.2511,  0.2519,  0.2526,  0.2534,
    0.2542,  0.255,   0.2557,  0.2565,  0.2572,  0.2579,  0.2587,  0.2594,
    0.2601,  0.2609,  0.2617,  0.2624,  0.2632,  0.2639,  0.2647,  0.2654,
    0.2662,  0.2669,  0.2676,  0.2684,  0.2691,  0.2699,  0.2706,  0.2713,
    0.2721,  0.2728,  0.2736,  0.2743,  0.2751,  0.2758,  0.2766,  0.2773,
    0.2781,  0.2789,  0.2796,  0.2804,  0.2811,  0.2818,  0.2825,  0.2833,
    0.284,   0.2847,  0.2855,  0.2863,  0.287,   0.2878,  0.2886,  0.2894,
    0.2901,  0.2909,  0.2916,  0.2923,  0.293,   0.2938,  0.2945,  0.2952,
    0.2959,  0.2967,  0.2974,  0.2981,  0.2989,  0.2996,  0.3003,  0.3011,
    0.3018,  0.3026,  0.3033,  0.3041,  0.3048,  0.3056,  0.3063,  0.307,
    0.3078,  0.3085,  0.3092,  0.31,    0.3107,  0.3115,  0.3123,  0.313,
    0.3138,  0.3146,  0.3153,  0.316,   0.3168,  0.3175,  0.3182,  0.3189,
    0.3197,  0.3204,  0.3212,  0.3219,  0.3227,  0.3234,  0.3242,  0.3249,
    0.3257,  0.3264,  0.3272,  0.3279,  0.3287,  0.3294,  0.3302,  0.3309,
    0.3316,  0.3323,  0.333,   0.3338,  0.3345,  0.3352,  0.336,   0.3367,
    0.3375,  0.3382,  0.339,   0.3397,  0.3405,  0.3412,  0.342,   0.3427,
    0.3435,  0.3442,  0.345,   0.3457,  0.3465,  0.3472,  0.3479,  0.3487,
    0.3494,  0.3501,  0.3508,  0.3515,  0.3522,  0.3529,  0.3536,  0.3543,
    0.355,   0.3558,  0.3565,  0.3573,  0.358,   0.3588,  0.3595,  0.3603,
    0.361,   0.3618,  0.3625,  0.3632,  0.364,   0.3647,  0.3655,  0.3662,
    0.367,   0.3677,  0.3685,  0.3692,  0.37,    0.3707,  0.3715,  0.3722,
    0.373,   0.3737,  0.3745,  0.3752,  0.3759,  0.3766,  0.3773,  0.378,
    0.3788,  0.3795,  0.3802,  0.3809,  0.3816,  0.3823,  0.383,   0.3838,
    0.3845,  0.3852,  0.3859,  0.3867,  0.3874,  0.3882,  0.3889,  0.3897,
    0.3904,  0.3912,  0.3919,  0.3927,  0.3934,  0.3942,  0.3949,  0.3956,
    0.3963,  0.3971,  0.3978,  0.3985,  0.3992,  0.3999,  0.4006,  0.4013,
    0.402,   0.4027,  0.4034,  0.4041,  0.4049,  0.4056,  0.4063,  0.407,
    0.4077,  0.4084,  0.4092,  0.4099,  0.4106,  0.4114,  0.4121,  0.4129,
    0.4137,  0.4144,  0.4152,  0.4159,  0.4166,  0.4174,  0.4181,  0.4188,
    0.4196,  0.4203,  0.421,   0.4217,  0.4225,  0.4232,  0.4239,  0.4246,
    0.4254,  0.4261,  0.4269,  0.4276,  0.4284,  0.4291,  0.4299,  0.4305,
    0.4312,  0.4319,  0.4325,  0.4332,  0.4339,  0.4345,  0.4353,  0.436,
    0.4368,  0.4376,  0.4384,  0.4392,  0.44,    0.4407,  0.4414,  0.4421,
    0.4428,  0.4435,  0.4443,  0.445,   0.4457,  0.4464,  0.4471,  0.4478,
    0.4486,  0.4493,  0.45,    0.4507,  0.4514,  0.4521,  0.4528,  0.4535,
    0.4542,  0.4549,  0.4557,  0.4564,  0.4572,  0.4579,  0.4586,  0.4594,
    0.4601,  0.4608,  0.4615,  0.4622,  0.463,   0.4637,  0.4644,  0.4651,
    0.4658,  0.4666,  0.4673,  0.468,   0.4687,  0.4695,  0.4702,  0.4709,
    0.4716,  0.4723,  0.473,   0.4737,  0.4744,  0.4751,  0.4759,  0.4766,
    0.4773,  0.4781,  0.4788,  0.4795,  0.4802,  0.481,   0.4817,  0.4824,
    0.4831,  0.4838,  0.4845,  0.4852,  0.486,   0.4867,  0.4875,  0.4882,
    0.489,   0.4897,  0.4905,  0.4912,  0.4919,  0.4926,  0.4934,  0.4941,
    0.4948,  0.4955,  0.4962,  0.4969,  0.4976,  0.4983,  0.499,   0.4997,
    0.5004,  0.5011,  0.5018,  0.5025,  0.5033,  0.504,   0.5047,  0.5054,
    0.5062,  0.5069,  0.5076,  0.5084,  0.5091,  0.5098,  0.5106,  0.5113,
    0.512,   0.5127,  0.5134,  0.5141,  0.5148,  0.5154,  0.5161,  0.5168,
    0.5175,  0.5182,  0.5189,  0.5196,  0.5203,  0.521,   0.5217,  0.5224,
    0.5231,  0.5239,  0.5246,  0.5253,  0.526,   0.5267,  0.5275,  0.5282,
    0.5289,  0.5296,  0.5303,  0.531,   0.5316,  0.5323,  0.533,   0.5336,
    0.5343,  0.535,   0.5356,  0.5363,  0.537,   0.5377,  0.5384,  0.5391,
    0.5398,  0.5405,  0.5412,  0.5419,  0.5426,  0.5434,  0.5441,  0.5448,
    0.5455,  0.5462,  0.5469,  0.5476,  0.5483,  0.549,   0.5497,  0.5504,
    0.5511,  0.5517,  0.5524,  0.5531,  0.5538,  0.5545,  0.5551,  0.5558,
    0.5565,  0.5572,  0.5579,  0.5586,  0.5593,  0.56,    0.5607,  0.5614,
    0.5621,  0.5627,  0.5634,  0.5641,  0.5648,  0.5655,  0.5662,  0.5669,
    0.5676,  0.5683,  0.569,   0.5697,  0.5703,  0.571,   0.5716,  0.5723,
    0.5729,  0.5736,  0.5742,  0.5749,  0.5756,  0.5763,  0.577,   0.5777,
    0.5784,  0.5792,  0.5799,  0.5805,  0.5812,  0.5819,  0.5825,  0.5832,
    0.5839,  0.5845,  0.5852,  0.5858,  0.5865,  0.5871,  0.5878,  0.5884,
    0.5891,  0.5897,  0.5904,  0.5911,  0.5917,  0.5924,  0.5931,  0.5938,
    0.5944,  0.5951,  0.5958,  0.5965,  0.5972,  0.5979,  0.5986,  0.5993,
    0.5999,  0.6006,  0.6012,  0.6019,  0.6025,  0.6032,  0.6038,  0.6045,
    0.6051,  0.6058,  0.6065,  0.6072,  0.6078,  0.6085,  0.6092,  0.6099,
    0.6105,  0.6112,  0.6119,  0.6125,  0.6132,  0.6138,  0.6145,  0.6152,
    0.6158,  0.6165,  0.6171,  0.6178,  0.6184,  0.6191,  0.6198,  0.6204,
    0.6211,  0.6217,  0.6223,  0.623,   0.6236,  0.6243,  0.6249,  0.6256,
    0.6262,  0.6269,  0.6276,  0.6282,  0.6289,  0.6295,  0.6302,  0.6308,
    0.6314,  0.6321,  0.6327,  0.6333,  0.634,   0.6346,  0.6352,  0.6359,
    0.6366,  0.6372,  0.6379,  0.6385,  0.6392,  0.6399,  0.6405,  0.6411,
    0.6418,  0.6424,  0.643,   0.6437,  0.6443,  0.6449,  0.6456,  0.6462,
    0.6469,  0.6475,  0.6482,  0.6489,  0.6495,  0.6502,  0.6508,  0.6514,
    0.652,   0.6526,  0.6532,  0.6539,  0.6545,  0.6551,  0.6558,  0.6564,
    0.6571,  0.6577,  0.6584,  0.659,   0.6597,  0.6603,  0.6609,  0.6615,
    0.6622,  0.6628,  0.6634,  0.664,   0.6646,  0.6652,  0.6658,  0.6665,
    0.6671,  0.6677,  0.6683,  0.6689,  0.6695,  0.6702,  0.6708,  0.6714,
    0.672,   0.6727,  0.6733,  0.6739,  0.6745,  0.6752,  0.6758,  0.6764,
    0.677,   0.6776,  0.6783,  0.6789,  0.6795,  0.6801,  0.6807,  0.6813,
    0.6819,  0.6826,  0.6832,  0.6838,  0.6844,  0.685,   0.6856,  0.6862,
    0.6868,  0.6874,  0.688,   0.6886,  0.6892,  0.6898,  0.6904,  0.691,
    0.6916,  0.6922,  0.6928,  0.6934,  0.694,   0.6946,  0.6952,  0.6959,
    0.6966,  0.6973,  0.698,   0.6987,  0.6994,  0.7001,  0.7009,  0.7018,
    0.7026,  0.7035,  0.7043,  0.7052,  0.7062,  0.7071,  0.7081,  0.709,
    0.71,    0.7111,  0.7123,  0.7134,  0.7145,  0.7157,  0.717,   0.7183,
    0.7196,  0.7211,  0.7227,  0.7242,  0.7261,  0.7281,  0.7303,  0.7332,
    0.74};


const float Gyroid5mm[] = {
    0,       0.02762, 0.03766, 0.04215, 0.04665, 0.05051, 0.05251, 0.05451,
    0.0565,  0.0585,  0.0605,  0.0625,  0.06344, 0.06439, 0.06533, 0.06627,
    0.06722, 0.06816, 0.06911, 0.07005, 0.07099, 0.07194, 0.07288, 0.07383,
    0.07477, 0.07567, 0.07657, 0.07746, 0.07835, 0.07924, 0.08013, 0.08102,
    0.08191, 0.0828,  0.0837,  0.08459, 0.08548, 0.08637, 0.08726, 0.08845,
    0.08976, 0.09106, 0.09237, 0.09367, 0.09497, 0.09628, 0.09758, 0.09889,
    0.1002,  0.1017,  0.1033,  0.1048,  0.1063,  0.1078,  0.1093,  0.1109,
    0.1124,  0.114,   0.1156,  0.1172,  0.1188,  0.1205,  0.1221,  0.1237,
    0.1253,  0.127,   0.1287,  0.1304,  0.1321,  0.1338,  0.1355,  0.1371,
    0.1389,  0.1408,  0.1426,  0.1444,  0.1462,  0.148,   0.1498,  0.1517,
    0.1535,  0.1553,  0.1571,  0.159,   0.1608,  0.1626,  0.1645,  0.1663,
    0.1682,  0.17,    0.1719,  0.1737,  0.1756,  0.1775,  0.1794,  0.1813,
    0.1832,  0.1851,  0.187,   0.1889,  0.1909,  0.1928,  0.1947,  0.1967,
    0.1986,  0.2005,  0.2024,  0.2043,  0.2062,  0.208,   0.2099,  0.2118,
    0.2137,  0.2155,  0.2173,  0.2192,  0.221,   0.2228,  0.2247,  0.2266,
    0.2285,  0.2304,  0.2324,  0.2343,  0.2362,  0.2382,  0.2401,  0.2421,
    0.2441,  0.246,   0.248,   0.25,    0.2518,  0.2537,  0.2556,  0.2575,
    0.2594,  0.2613,  0.2632,  0.2651,  0.2669,  0.2688,  0.2706,  0.2725,
    0.2743,  0.2762,  0.2781,  0.28,    0.2819,  0.2838,  0.2856,  0.2875,
    0.2895,  0.2914,  0.2934,  0.2953,  0.2973,  0.2992,  0.3012,  0.3031,
    0.305,   0.3068,  0.3087,  0.3106,  0.3125,  0.3144,  0.3163,  0.3182,
    0.3201,  0.3219,  0.3238,  0.3257,  0.3276,  0.3295,  0.3314,  0.3333,
    0.3352,  0.3372,  0.3391,  0.341,   0.3429,  0.3449,  0.3468,  0.3487,
    0.3506,  0.3525,  0.3543,  0.3562,  0.358,   0.3599,  0.3617,  0.3636,
    0.3654,  0.3673,  0.3692,  0.371,   0.3729,  0.3747,  0.3767,  0.3786,
    0.3806,  0.3825,  0.3845,  0.3865,  0.3884,  0.3904,  0.3923,  0.3943,
    0.3962,  0.3982,  0.4001,  0.402,   0.4038,  0.4057,  0.4075,  0.4093,
    0.4112,  0.413,   0.4148,  0.4167,  0.4185,  0.4203,  0.4222,  0.424,
    0.4258,  0.4278,  0.4297,  0.4316,  0.4336,  0.4355,  0.4374,  0.4394,
    0.4414,  0.4434,  0.4453,  0.4473,  0.4493,  0.4512,  0.453,   0.4549,
    0.4568,  0.4586,  0.4605,  0.4623,  0.4642,  0.466,   0.4678,  0.4697,
    0.4715,  0.4733,  0.4752,  0.4771,  0.4791,  0.481,   0.4829,  0.4848,
    0.4868,  0.4887,  0.4906,  0.4925,  0.4944,  0.4963,  0.4982,  0.5001,
    0.502,   0.5038,  0.5057,  0.5075,  0.5094,  0.5112,  0.5131,  0.5149,
    0.5168,  0.5187,  0.5206,  0.5224,  0.5243,  0.5262,  0.5282,  0.5301,
    0.5321,  0.534,   0.536,   0.5379,  0.5398,  0.5416,  0.5435,  0.5454,
    0.5473,  0.5491,  0.551,   0.5528,  0.5546,  0.5564,  0.5583,  0.5601,
    0.5619,  0.5638,  0.5656,  0.5675,  0.5694,  0.5713,  0.5732,  0.5751,
    0.577,   0.579,   0.5809,  0.5829,  0.5848,  0.5868,  0.5887,  0.5906,
    0.5925,  0.5944,  0.5963,  0.5982,  0.6001,  0.6019,  0.6037,  0.6055,
    0.6073,  0.6091,  0.6109,  0.6127,  0.6146,  0.6165,  0.6183,  0.6202,
    0.622,   0.6239,  0.6258,  0.6277,  0.6297,  0.6316,  0.6336,  0.6355,
    0.6375,  0.6393,  0.6412,  0.643,   0.6449,  0.6467,  0.6486,  0.6504,
    0.6523,  0.6541,  0.656,   0.6578,  0.6597,  0.6615,  0.6634,  0.6653,
    0.6672,  0.6691,  0.671,   0.6729,  0.6748,  0.6767,  0.6786,  0.6805,
    0.6823,  0.6842,  0.6861,  0.6879,  0.6897,  0.6915,  0.6934,  0.6952,
    0.697,   0.6988,  0.7006,  0.7025,  0.7044,  0.7062,  0.7081,  0.71,
    0.7119,  0.7138,  0.7158,  0.7177,  0.7197,  0.7216,  0.7235,  0.7255,
    0.7273,  0.7291,  0.731,   0.7328,  0.7347,  0.7365,  0.7383,  0.7401,
    0.7419,  0.7437,  0.7454,  0.7472,  0.749,   0.7508,  0.7527,  0.7546,
    0.7565,  0.7584,  0.7603,  0.7622,  0.7641,  0.766,   0.7679,  0.7698,
    0.7718,  0.7737,  0.7756,  0.7774,  0.7792,  0.781,   0.7828,  0.7847,
    0.7865,  0.7883,  0.7902,  0.792,   0.7939,  0.7957,  0.7976,  0.7994,
    0.8013,  0.8032,  0.8051,  0.8069,  0.8088,  0.8107,  0.8126,  0.8144,
    0.8162,  0.818,   0.8199,  0.8217,  0.8235,  0.8253,  0.8271,  0.829,
    0.8308,  0.8326,  0.8345,  0.8363,  0.8382,  0.8401,  0.842,   0.8439,
    0.8458,  0.8477,  0.8496,  0.8515,  0.8533,  0.8552,  0.857,   0.8589,
    0.8607,  0.8625,  0.8643,  0.8661,  0.8679,  0.8696,  0.8714,  0.8732,
    0.875,   0.8768,  0.8787,  0.8805,  0.8824,  0.8843,  0.8861,  0.888,
    0.8899,  0.8918,  0.8937,  0.8957,  0.8976,  0.8995,  0.9013,  0.9031,
    0.9049,  0.9067,  0.9086,  0.9104,  0.9122,  0.914,   0.9157,  0.9175,
    0.9193,  0.9211,  0.9229,  0.9247,  0.9266,  0.9285,  0.9303,  0.9322,
    0.9341,  0.936,   0.9378,  0.9397,  0.9415,  0.9433,  0.9451,  0.9469,
    0.9487,  0.9506,  0.9524,  0.9542,  0.956,   0.9578,  0.9596,  0.9614,
    0.9632,  0.9651,  0.967,   0.9688,  0.9707,  0.9726,  0.9744,  0.9763,
    0.9781,  0.9799,  0.9817,  0.9836,  0.9854,  0.9872,  0.989,   0.9907,
    0.9925,  0.9942,  0.996,   0.9977,  0.9995,  1.001,   1.003,   1.005,
    1.007,   1.009,   1.011,   1.012,   1.014,   1.016,   1.018,   1.02,
    1.022,   1.024,   1.026,   1.027,   1.029,   1.031,   1.033,   1.034,
    1.036,   1.038,   1.04,    1.041,   1.043,   1.045,   1.047,   1.049,
    1.05,    1.052,   1.054,   1.056,   1.058,   1.06,    1.062,   1.063,
    1.065,   1.067,   1.069,   1.071,   1.072,   1.074,   1.076,   1.078,
    1.08,    1.081,   1.083,   1.085,   1.087,   1.089,   1.09,    1.092,
    1.094,   1.096,   1.098,   1.099,   1.101,   1.103,   1.105,   1.107,
    1.108,   1.11,    1.112,   1.114,   1.115,   1.117,   1.119,   1.121,
    1.123,   1.124,   1.126,   1.128,   1.13,    1.132,   1.134,   1.135,
    1.137,   1.139,   1.141,   1.143,   1.144,   1.146,   1.148,   1.15,
    1.151,   1.153,   1.155,   1.157,   1.158,   1.16,    1.162,   1.164,
    1.166,   1.167,   1.169,   1.171,   1.173,   1.175,   1.176,   1.178,
    1.18,    1.182,   1.184,   1.185,   1.187,   1.189,   1.191,   1.193,
    1.194,   1.196,   1.198,   1.2,     1.201,   1.203,   1.205,   1.207,
    1.208,   1.21,    1.212,   1.214,   1.215,   1.217,   1.219,   1.221,
    1.223,   1.224,   1.226,   1.228,   1.23,    1.232,   1.233,   1.235,
    1.237,   1.239,   1.24,    1.242,   1.244,   1.246,   1.247,   1.249,
    1.251,   1.253,   1.254,   1.256,   1.258,   1.26,    1.262,   1.263,
    1.265,   1.267,   1.268,   1.27,    1.272,   1.274,   1.275,   1.277,
    1.279,   1.281,   1.283,   1.284,   1.286,   1.288,   1.29,    1.291,
    1.293,   1.295,   1.297,   1.298,   1.3,     1.302,   1.304,   1.305,
    1.307,   1.309,   1.31,    1.312,   1.314,   1.316,   1.317,   1.319,
    1.321,   1.323,   1.325,   1.326,   1.328,   1.33,    1.332,   1.333,
    1.335,   1.337,   1.339,   1.34,    1.342,   1.344,   1.345,   1.347,
    1.349,   1.35,    1.352,   1.354,   1.356,   1.357,   1.359,   1.361,
    1.363,   1.364,   1.366,   1.368,   1.369,   1.371,   1.373,   1.375,
    1.376,   1.378,   1.38,    1.381,   1.383,   1.385,   1.387,   1.388,
    1.39,    1.392,   1.393,   1.395,   1.397,   1.398,   1.4,     1.402,
    1.404,   1.405,   1.407,   1.409,   1.411,   1.412,   1.414,   1.416,
    1.417,   1.419,   1.421,   1.423,   1.424,   1.426,   1.428,   1.429,
    1.431,   1.433,   1.434,   1.436,   1.438,   1.439,   1.441,   1.443,
    1.444,   1.446,   1.448,   1.449,   1.451,   1.453,   1.455,   1.456,
    1.458,   1.46,    1.461,   1.463,   1.465,   1.466,   1.468,   1.47,
    1.471,   1.473,   1.475,   1.476,   1.478,   1.48,    1.481,   1.483,
    1.485,   1.487,   1.488,   1.49,    1.492,   1.493,   1.495,   1.497,
    1.498,   1.5,     1.501,   1.503,   1.505,   1.506,   1.508,   1.51,
    1.511,   1.513,   1.515,   1.516,   1.518,   1.52,    1.521,   1.523,
    1.525,   1.526,   1.528,   1.53,    1.531,   1.533,   1.535,   1.536,
    1.538,   1.54,    1.541,   1.543,   1.545,   1.546,   1.548,   1.549,
    1.551,   1.553,   1.554,   1.556,   1.558,   1.559,   1.561,   1.563,
    1.564,   1.566,   1.567,   1.569,   1.571,   1.572,   1.574,   1.575,
    1.577,   1.579,   1.58,    1.582,   1.584,   1.585,   1.587,   1.588,
    1.59,    1.592,   1.593,   1.595,   1.597,   1.598,   1.6,     1.601,
    1.603,   1.605,   1.606,   1.608,   1.609,   1.611,   1.613,   1.614,
    1.616,   1.617,   1.619,   1.621,   1.622,   1.624,   1.625,   1.627,
    1.629,   1.63,    1.632,   1.633,   1.635,   1.637,   1.638,   1.64,
    1.641,   1.643,   1.644,   1.646,   1.648,   1.649,   1.651,   1.652,
    1.654,   1.655,   1.657,   1.659,   1.66,    1.662,   1.663,   1.665,
    1.666,   1.668,   1.67,    1.671,   1.673,   1.674,   1.676,   1.677,
    1.679,   1.68,    1.682,   1.684,   1.685,   1.687,   1.688,   1.69,
    1.691,   1.693,   1.694,   1.696,   1.698,   1.699,   1.701,   1.702,
    1.704,   1.705,   1.707,   1.708,   1.71,    1.711,   1.713,   1.714,
    1.716,   1.717,   1.719,   1.72,    1.722,   1.723,   1.725,   1.726,
    1.728,   1.729,   1.731,   1.732,   1.734,   1.735,   1.737,   1.739,
    1.74,    1.742,   1.744,   1.746,   1.748,   1.749,   1.751,   1.753,
    1.756,   1.758,   1.76,    1.762,   1.764,   1.767,   1.769,   1.772,
    1.774,   1.777,   1.78,    1.783,   1.786,   1.789,   1.792,   1.795,
    1.799,   1.802,   1.806,   1.81,    1.815,   1.82,    1.825,   1.833,
    1.85};


std::vector<PointSample> LoadPoints(const std::string& filename) {
  std::vector<PointSample> points;
  std::ifstream in(filename);
  std::string line;
  while (std::getline(in, line)) {
    if (line.size() < 4) {
      continue;
    }
    std::istringstream iss(line);
    PointSample ps;
    iss >> ps.pos[0] >> ps.pos[1] >> ps.pos[2] >> ps.val;
    points.push_back(ps);
  }
  in.close();
  return points;
}

void TestGrinSienna() { 
  std::vector<Vec2f> rhoToE(98);
  std::cout << sizeof(Gyroid5mm) << "\n";
  std::vector<float> gyroid5mmR2T(sizeof(Gyroid5mm) / sizeof(Gyroid5mm[0]));
  for (size_t i = 0; i < gyroid5mmR2T.size(); i++) {
    gyroid5mmR2T[i] = Gyroid5mm[i];
  }
  LookupTable r2t;
  r2t.y = gyroid5mmR2T;
  r2t.dx = 0.001;
  r2t.x0 = 0;  
  float rho0 = 0.01;
  float drho = 0.01;
  for (size_t i = 0; i < rhoToE.size();i++) {
    float rho = rho0 + i * drho;
    float eps = RhoToEps(rho);
    rhoToE[i] = Vec2f(rho, eps);
  }

  LookupTable lut = InverseIncreasingMap(rhoToE, 0.01);
  //out.open("F:/meshes/grin_lens/e2r.txt");
  //for (size_t i = 0; i < lut.y.size() * 3; i++) {
  //  float x = (lut.x0 + i * lut.dx/3);
  //  float y = lut.Lookup(x);
  //  out << x << " " << y << "\n";    
  //}
  //out.close();
  std::vector<PointSample> points;  
  points = LoadPoints("F:/meshes/grin_lens/Lens_Permittivity.txt");
  for (auto& p : points) {
    // scale from cm to mm.
    p.pos *= 10;
  }
  float dx = 1;
  float dy = 1;
  float dz = 8 / 29.0f;
  Box3f box;
  box.vmin = points[0].pos;
  box.vmax = points[0].pos;

  for (size_t i = 1; i < points.size(); i++) {
    for (unsigned dim = 0; dim < 3; dim++) {
      box.vmin[dim] = std::min(box.vmin[dim], points[i].pos[dim]);
      box.vmax[dim] = std::max(box.vmax[dim], points[i].pos[dim]);
    }
  }
  std::cout << box.vmin[0] << " " << box.vmin[1] << " " << box.vmin[2] << "\n";
  std::cout << box.vmax[0] << " " << box.vmax[1] << " " << box.vmax[2] << "\n";
  Vec3u gridSize;
  Vec3f boxSize = box.vmax - box.vmin;
  gridSize[0] = std::roundf(boxSize[0] / dx) + 1;
  gridSize[1] = std::roundf(boxSize[1] / dy) + 1;
  gridSize[2] = std::roundf(boxSize[2] / dz) + 1;
  std::cout << gridSize[0] << " " << gridSize[1] << " " << gridSize[2] << "\n";
  
  Array3Df field(gridSize, 0);
  for (size_t i = 0; i < points.size(); i++) {
    Vec3f p = points[i].pos - box.vmin;
    unsigned ix = std::roundf(p[0] / dx);
    unsigned iy = std::roundf(p[1] / dy);
    unsigned iz = std::roundf(p[2] / dz);
    float rho = lut.Lookup(points[i].val);
    float t = r2t.Lookup(rho);
    field(ix, iy, iz) = t;
  }
  Vec3f res(dx, dy, dz);
  SaveVoxTxt(field, res, "F:/meshes/grin_lens/t_field.txt", box.vmin);
}

void TestGrin() {
  std::vector<Vec2f> rhoToE(98);
  std::cout << sizeof(Gyroid5mm) << "\n";
  std::vector<float> gyroid5mmR2T(sizeof(Gyroid5mm) / sizeof(Gyroid5mm[0]));
  for (size_t i = 0; i < gyroid5mmR2T.size(); i++) {
    gyroid5mmR2T[i] = Gyroid5mm[i];
  }
  LookupTable r2t;
  r2t.y = gyroid5mmR2T;
  r2t.dx = 0.001;
  r2t.x0 = 0;
  float rho0 = 0.01;
  float drho = 0.01;
  //cot
  //const float eps0 = 2.35;
  //epoxy
  const float eps0 = 2.7;
  for (size_t i = 0; i < rhoToE.size(); i++) {
    float rho = rho0 + i * drho;
    float eps = RhoToEpsBruggeman(rho, eps0);
    rhoToE[i] = Vec2f(rho, eps);
  }

  LookupTable lut = InverseIncreasingMap(rhoToE, 0.01);

  std::vector<PointSample> points;
  points = LoadPoints("F:/meshes/grin/InkBit_v2_lens_design_point_cloud_2025_08_13.tsv");
  //scale m to mm
  for (auto& p : points) {
    p.pos *= 1000;
  }
  float dx = 1.0f;
  float dy = 1.0f;
  float dz = 1.0f;
  Box3f box;
  box.vmin = points[0].pos;
  box.vmax = points[0].pos;

  for (size_t i = 1; i < points.size(); i++) {
    for (unsigned dim = 0; dim < 3; dim++) {
      box.vmin[dim] = std::min(box.vmin[dim], points[i].pos[dim]);
      box.vmax[dim] = std::max(box.vmax[dim], points[i].pos[dim]);
    }
  }
  std::cout << "box min " << box.vmin[0] << " " << box.vmin[1] << " " << box.vmin[2] << "\n";
  std::cout <<"box max " << box.vmax[0] << " " << box.vmax[1] << " " << box.vmax[2] << "\n";
  Vec3u gridSize;
  Vec3f boxSize = box.vmax - box.vmin;
  gridSize[0] = std::roundf(boxSize[0] / dx) + 1;
  gridSize[1] = std::roundf(boxSize[1] / dy) + 1;
  gridSize[2] = std::roundf(boxSize[2] / dz) + 1;
  std::cout << gridSize[0] << " " << gridSize[1] << " " << gridSize[2] << "\n";

  Array3Df field(gridSize, 0);

  for (size_t i = 0; i < points.size(); i++) {
    Vec3f p = points[i].pos - box.vmin;
    unsigned ix = std::roundf(p[0] / dx);
    unsigned iy = std::roundf(p[1] / dy);
    unsigned iz = std::roundf(p[2] / dz);
    if (points[i].val >= eps0) {
      field(ix, iy, iz) = 3;//full cell
    } else if (points[i].val<1.01) {
      field(ix, iy, iz) = 0;  // empty
    } else {
      float rho = lut.Lookup(points[i].val);
      float t = r2t.Lookup(rho);
      field(ix, iy, iz) = t;
    }
  }
  Vec3f res(dx, dy, dz);
  // save points as obj for debug
  //std::ofstream out("F:/dump/lune_points.obj");
  //for (auto& p : points) {
  //  out << "v " << p.pos[0] << " " << p.pos[1] << " " << p.pos[2] << "\n";
  //}
  //out.close();
   SaveVoxTxt(field, res, "F:/meshes/grin/EPX_gyroid5mm.txt", box.vmin);
}